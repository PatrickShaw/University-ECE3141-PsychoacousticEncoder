path = 'snippet.flac';
% In milliseconds
window_time_width = 100; 
t = 0:1/50:10-1/50;                     
x = sin(2*pi*15*t) + sin(2*pi*20*t);
[o_y, o_fs] = audioread(path);
audio_info = audioinfo(path);
% Number of elements per window
window_sample_width = round(audio_info.TotalSamples * (window_time_width / 1000)); 
audio_sample_len = size(o_y, 1);
disp("Window sample width: " + window_sample_width);
w = 1;
channel_len = size(o_y, 2);
while w <= window_sample_width
    % Grab the fast fourier transform so that we can determine what 
    % frequencies are being overpowered by other frequencies in the sample
    end_window_index = min(w + (window_sample_width - 1), audio_sample_len);
    fft_y = fftshift(fft(o_y(w:end_window_index)));
    fft_y_1_len = size(fft_y, 1);
    fft_y_1_half_len = floor(fft_y_1_len / 2);
    disp(fft_y_1_len);
    % Abs the FFT so we can look at soley the amplitude of the frequencies.
    % The FFT, otherwise, would be covered in complex numbers.
    fft_y_abs = abs(fft_y);
    for c = 1:channel_len
        for a = 1:fft_y_1_len / 2
            if fft_y(a, c) < 100
                fft_y(a, c) = 0;
                fft_y(fft_y_1_len - 1, c) = 0;
            end
        end
    end
    n_y = ifft(ifftshift(fft_y));
    for c = 1:channel_len
        for i = 1:fft_y_1_len
            o_y(w + (i - 1), c) = n_y(i, c);
        end
    end
    w = end_window_index + 1;
end
plot(abs(fftshift(fft(o_y))));
sound(o_y, o_fs);